---
- name: Prepare all Kubernetes nodes
  hosts: k8s_all
  become: yes
  vars:
    k8s_version: "1.28.5"

  tasks:

    - name: Clean up old or conflicting repository configurations
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - /etc/apt/sources.list.d/kubernetes.list
        - /etc/apt/sources.list.d/docker.list
        - /etc/apt/keyrings/kubernetes-apt-keyring.gpg
        - /etc/apt/keyrings/kubernetes-apt-keyring.key
        - /etc/apt/keyrings/docker.gpg

    - name: Disable swap
      ansible.builtin.shell: |
        swapoff -a
        sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab

    - name: Load required kernel modules for networking
      ansible.builtin.shell: |
        cat <<EOF | sudo tee /etc/modules-load.d/k8s-networking.conf
        overlay
        br_netfilter
        EOF
        sudo modprobe overlay
        sudo modprobe br_netfilter

    - name: Configure required sysctl params
      ansible.builtin.shell: |
        cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
        net.bridge.bridge-nf-call-iptables  = 1
        net.bridge.bridge-nf-call-ip6tables = 1
        net.ipv4.ip_forward                 = 1
        EOF
        sudo sysctl --system

    - name: Install prerequisite packages
      ansible.builtin.apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
        state: present
        update_cache: yes

    - name: Create directory for GPG keys
      ansible.builtin.file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Add Docker GPG key
      ansible.builtin.get_url:
        url: https://download.docker.com/linux/debian/gpg
        dest: /etc/apt/keyrings/docker.gpg
        mode: '0644'
        force: true

    - name: Add Docker repository
      ansible.builtin.apt_repository:
        repo: "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian {{ ansible_distribution_release }} stable"
        state: present
        filename: docker

    - name: Install containerd
      ansible.builtin.apt:
        name: containerd.io
        state: present

    - name: Configure containerd to use systemd cgroup
      ansible.builtin.copy:
        content: |
          [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
            runtime_type = "io.containerd.runc.v2"
          [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
            SystemdCgroup = true
        dest: /etc/containerd/config.toml
        owner: root
        group: root
        mode: '0644'

    - name: Restart and enable containerd
      ansible.builtin.systemd:
        name: containerd
        state: restarted
        enabled: yes
        daemon_reload: yes

    - name: Add Kubernetes GPG key
      ansible.builtin.get_url:
        url: "https://pkgs.k8s.io/core:/stable:/v{{ k8s_version.split('.')[0] }}.{{ k8s_version.split('.')[1] }}/deb/Release.key"
        dest: /etc/apt/keyrings/kubernetes-apt-keyring.key
        mode: '0644'

    - name: Add Kubernetes APT repository
      ansible.builtin.apt_repository:
        repo: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.key] https://pkgs.k8s.io/core:/stable:/v{{ k8s_version.split('.')[0] }}.{{ k8s_version.split('.')[1] }}/deb/ /"
        state: present
        filename: kubernetes

    - name: Unhold Kubernetes packages to allow installation/update
      ansible.builtin.dpkg_selections:
        name: "{{ item }}"
        selection: install
      loop:
        - kubelet
        - kubeadm
        - kubectl

    - name: Install kubeadm, kubelet, kubectl
      ansible.builtin.apt:
        name:
          - kubelet={{ k8s_version }}-*
          - kubeadm={{ k8s_version }}-*
          - kubectl={{ k8s_version }}-*
        state: present
        allow_change_held_packages: yes
        allow_downgrade: yes
        update_cache: yes

    - name: Hold Kubernetes packages to prevent auto-update
      ansible.builtin.dpkg_selections:
        name: "{{ item }}"
        selection: hold
      loop:
        - kubelet
        - kubeadm
        - kubectl
        
    - name: Start and enable kubelet
      ansible.builtin.systemd:
        name: kubelet
        state: started
        enabled: yes

    # --- ВОТ ИСПРАВЛЕННЫЙ БЛОК ---
    # Обратите внимание, что 'ansible.builtin.community.general.modprobe' и 'loop'
    # являются параметрами задачи 'Ensure IPVS kernel modules are loaded',
    # поэтому они должны иметь больший отступ.
    - name: Ensure IPVS kernel modules are loaded
      ansible.builtin.community.general.modprobe:
        name: "{{ item }}"
        state: present
      loop:
        - ip_vs
        - ip_vs_rr
        - ip_vs_wrr
        - ip_vs_sh
        - nf_conntrack

    # Вторая задача должна быть на том же уровне отступа, что и первая.
    - name: Create IPVS modules config file for autoload on boot
      ansible.builtin.copy:
        dest: /etc/modules-load.d/k8s-ipvs.conf
        content: |
          ip_vs
          ip_vs_rr
          ip_vs_wrr
          ip_vs_sh
          nf_conntrack
